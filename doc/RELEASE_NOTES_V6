                      RELEASE NOTES Ragel 6.X

This file describes the changes in Ragel version 6.X that are not backwards
compatible. For a list of all the changes see the ChangeLog file.

The EOF Event
=============

There is a new execution variable called "eof". This should be set to pe on the
execution of the last buffer block. When p == eof the state machine's EOF
actions are executed. The variable is required only when EOF actions have been
embedded.

The advantage of this over "write eof" is that EOF actions are now executed in
the same context as regular actions. They are free to manipulate p, and jump to
a new portion of the machine to reprocess input. This was not possible with
"write eof".

The "write eof" directive was consequently removed.

Scanners now use EOF actions to to flush out the last token, if needed. This
eliminates the need to manually flush the last token.

Semantics of > % and Error Actions
==================================

Now that EOF actions are executed in the same context as regular actions we are
free to go back to the 3.X semantics for >, % and error actions. 

Those that have been using Ragel since the 3.X days will remember that the >
operator also embedded a leaving action/priority into the start state when it
was final. The leaving operator would embed EOF actions when the final states
stayed final all the way to the end of compilation. Also error actions would
embed EOF actions when at the end of compilation the error states were not
final.

These characteristics were removed because EOF actions were not executed in the
same context as regular actions and easily resulted in compile errors. Now that
all actions are executed in the same context this is no longer a problem and
the orignal Ragel semantics is restored.

Backend Automatically Executed
==============================

The "ragel" program now automatically executes the appropriate backend. If you
need the intermediate XML format you can use the -x option. Your makefiles will
need to be updated.

The fbreak Statement
====================

The fbreak statement now advances p. It is now possible to break out of the
machine and restart it without having to fixing p first. Originally fbreak did
not advance p because it was intended to be used stop processing and advancing
p was more work than necessary in that case. But it turns out to be also useful
for stopping to return a token. In this case the failure to advance p is a
major inconvenience.

Guarded Concatenation Operators are Stronger
============================================

The :> :>> and <: guarded concatenation operators have been strengthend. In the
previous version of Ragel is was possible for the priority assignments to be
bypassed via the the zero length string. Running these examples through 5.25
you will see that the a and b actions are executed on the same character,
showing the guard fails. This happens because the the operators did not
consider that the middle machine might have a start state that is final. In 6.0
these cases have been fixed.

    (' '@a)* <: 'x'* . ' '@b;
    (' '@a)* :> 'x'? . ' '@b;
    (' '@a)* :>> 'xyz'? . ' '@b;
	
The tokstart and tokend Variables Renamed
=========================================

The "tokstart" and "tokend" variables were changed to "ts" and "te". These
variables can be referenced a lot in scanner actions. They should be shorter.

To update your code simply search and replace:
    tokstart => ts
    tokend => te
